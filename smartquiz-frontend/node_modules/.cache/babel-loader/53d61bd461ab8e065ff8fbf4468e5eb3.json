{"ast":null,"code":"import _classCallCheck from \"/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/src/components/Session/Session.js\";\nimport React, { Fragment, Component } from 'react';\nimport './Session.css';\nimport magnet from \"../../assets/img/magnet.svg\";\nimport Correct from './Correct';\nimport Complete from './Complete';\nimport Wrong from './Wrong';\nimport 'tachyons';\nvar initialSessionState = {\n  questionBank: [],\n  current_question: {},\n  sessionState: 'start',\n  answers: []\n};\n\nvar shuffleArray = function shuffleArray(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nvar b64DecodeUnicode = function b64DecodeUnicode(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return decodeURIComponent(atob(str).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n};\n\nvar Session =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Session, _Component);\n\n  function Session(props) {\n    var _this;\n\n    _classCallCheck(this, Session);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Session).call(this));\n\n    _this.loadQuestionBank = function (questionsData) {\n      _this.setState({\n        questionBank: questionsData\n      });\n\n      console.log(\"Loaded questionBank\", _this.state.questionBank);\n\n      _this.loadNewQuestion();\n    };\n\n    _this.loadNewQuestion = function () {\n      var questionsData = _this.state.questionBank;\n      var newQuestion = questionsData.shift();\n\n      if (newQuestion) {\n        var answers = _this.jumbleAnswersList(newQuestion);\n\n        _this.setState({\n          current_question: newQuestion,\n          sessionState: 'active',\n          answers: answers\n        });\n\n        console.log(_this.state);\n      } else {\n        _this.setState({\n          sessionState: 'completed'\n        });\n      }\n    };\n\n    _this.jumbleAnswersList = function (questionData) {\n      console.log(questionData);\n      var answerArr = [].concat(questionData.incorrect_answers);\n      answerArr.push(questionData.correct_answer);\n      return shuffleArray(answerArr);\n    };\n\n    _this.onSelectAnswer = function (event) {\n      var chosenAns = event.target.getAttribute(\"name\");\n      console.log(\"User chose this:\", chosenAns, _this.props.appState);\n      var q = _this.props.appState.userProfile.stats.questions;\n      var a = _this.props.appState.userProfile.stats.correct;\n\n      if (chosenAns === _this.state.current_question.correct_answer) {\n        console.log(\"Well Done, you chose the right answer\");\n\n        _this.setState({\n          sessionState: 'correct_answer'\n        });\n\n        _this.setState(Object.assign(_this.props.appState.userProfile.stats, {\n          questions: q + 1,\n          correct: a + 1\n        }));\n\n        console.log(_this.props.appState);\n      } else {\n        console.log(\"You chose the wrong answer. Hard Luck\");\n\n        _this.setState({\n          sessionState: 'incorrect_answer'\n        });\n\n        _this.setState(Object.assign(_this.props.appState.userProfile.stats, {\n          questions: q + 1,\n          correct: a\n        }));\n\n        console.log(_this.props.appState);\n      }\n    };\n\n    _this.onNextQuestion = function () {\n      console.log(\"Moving on and loading new question\");\n\n      _this.loadNewQuestion();\n    };\n\n    _this.state = initialSessionState;\n    return _this;\n  }\n\n  _createClass(Session, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var category = this.props.appState.questions.active_category.id;\n      var amount = this.props.appState.questions.count.active;\n      fetch(\"https://opentdb.com/api.php?amount=\".concat(amount, \"&category=\").concat(category, \"&difficulty=easy&type=multiple&encode=base64\")).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this2.loadQuestionBank(data.results);\n      }).catch(console.log);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          current_question = _this$state.current_question,\n          answers = _this$state.answers;\n      var answerDivs = answers.map(function (answer, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          name: answer,\n          className: \"session-answer bg-light-gray mh3 mv4 pa3 pointer grow shadow-5 f4\",\n          onClick: _this3.onSelectAnswer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, \" \", b64DecodeUnicode(answer), \" \");\n      });\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, this.state.sessionState === \"active\" ? React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pa3 center flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"f3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \" \", \" \".concat(b64DecodeUnicode(current_question.question))), React.createElement(\"div\", {\n        className: \"answer-container dark-gray pa2 mv2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, answerDivs))) : this.state.sessionState === \"correct_answer\" ? React.createElement(Correct, {\n        onNextQuestion: this.onNextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }) : this.state.sessionState === \"incorrect_answer\" ? React.createElement(Wrong, {\n        onNextQuestion: this.onNextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }) : this.state.sessionState === 'completed' ? React.createElement(Complete, {\n        appState: this.props.appState,\n        onFinishGame: this.props.backToHome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }) : React.createElement(\"img\", {\n        className: \"load-logo\",\n        src: magnet,\n        height: \"80px\",\n        width: \"80px\",\n        alt: \"QuizMaster\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Session;\n}(Component);\n\nexport default Session;","map":{"version":3,"sources":["/home/rishabbakshi/Codebase/My Projects/BitBucket/smartquiz-master/smartquiz-frontend/src/components/Session/Session.js"],"names":["React","Fragment","Component","Correct","Complete","Wrong","initialSessionState","questionBank","current_question","sessionState","answers","shuffleArray","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","b64DecodeUnicode","str","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","Session","props","loadQuestionBank","questionsData","setState","console","log","state","loadNewQuestion","newQuestion","shift","jumbleAnswersList","questionData","answerArr","concat","incorrect_answers","push","correct_answer","onSelectAnswer","event","chosenAns","target","getAttribute","appState","q","userProfile","stats","questions","a","correct","Object","assign","onNextQuestion","category","active_category","id","amount","count","active","fetch","then","res","json","data","results","catch","answerDivs","answer","index","question","backToHome","magnet"],"mappings":"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","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport './Session.css';\nimport magnet from '../../assets/img/magnet.svg';\n\nimport Correct from './Correct';\nimport Complete from './Complete';\nimport Wrong from './Wrong';\n\nimport 'tachyons';\n\nconst initialSessionState = {\n    questionBank: [],\n    current_question: {},\n    sessionState: 'start',\n    answers: []\n}\n\nconst shuffleArray = (array) => {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nconst b64DecodeUnicode = (str) => {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return decodeURIComponent(atob(str).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n}\n\nclass Session extends Component {\n    constructor(props) {\n        super()\n        this.state = initialSessionState;\n    }  \n    \n    componentDidMount() {\n        const category = this.props.appState.questions.active_category.id;\n        const amount = this.props.appState.questions.count.active;\n\n        fetch(`https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=easy&type=multiple&encode=base64`)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data)\n                this.loadQuestionBank(data.results)\n            })\n            .catch(console.log);\n    }\n\n    loadQuestionBank = (questionsData) => {\n        this.setState({ questionBank: questionsData });\n        console.log(\"Loaded questionBank\", this.state.questionBank)\n        this.loadNewQuestion()\n    }\n\n    loadNewQuestion = () => {\n        const questionsData = this.state.questionBank;\n        const newQuestion = questionsData.shift()\n        if (newQuestion) {\n            const answers = this.jumbleAnswersList(newQuestion)\n            this.setState({ current_question: newQuestion, sessionState: 'active', answers:  answers})\n            console.log(this.state);\n        }\n        else {\n            this.setState({ sessionState: 'completed' })\n        }\n\n    }\n\n    jumbleAnswersList = (questionData) => {\n        console.log(questionData)\n        let answerArr = [].concat(questionData.incorrect_answers);\n        answerArr.push(questionData.correct_answer);\n        return shuffleArray(answerArr); \n    }\n\n    onSelectAnswer = (event) => {\n        const chosenAns = event.target.getAttribute(\"name\")\n        console.log(\"User chose this:\", chosenAns, this.props.appState)\n\n        let q = this.props.appState.userProfile.stats.questions;\n        let a = this.props.appState.userProfile.stats.correct;\n        if (chosenAns === this.state.current_question.correct_answer) {\n            console.log(\"Well Done, you chose the right answer\");\n            this.setState({ sessionState: 'correct_answer'})            \n            this.setState(Object.assign(this.props.appState.userProfile.stats, { questions: q + 1, correct: a + 1}))\n            console.log(this.props.appState);\n        } else {\n            console.log(\"You chose the wrong answer. Hard Luck\")\n            \n            this.setState({ sessionState: 'incorrect_answer'})            \n            this.setState(Object.assign(this.props.appState.userProfile.stats, { questions: q + 1, correct: a}))\n            console.log(this.props.appState);\n        }\n    }\n\n    onNextQuestion = () => {\n        console.log(\"Moving on and loading new question\")\n        this.loadNewQuestion()\n    }\n\n    \n\n    render() {\n        const { current_question, answers } = this.state;\n        const answerDivs = answers.map((answer,index) => {\n            return(\n                <div key={index} name={answer} className=\"session-answer bg-light-gray mh3 mv4 pa3 pointer grow shadow-5 f4\" onClick={this.onSelectAnswer}> {b64DecodeUnicode(answer)} </div>\n            )\n        })\n\n        return (\n            <Fragment>\n            {\n                (this.state.sessionState === \"active\") ?\n                <Fragment>\n                    <div className=\"pa3 center flex-column\">\n                        <div className=\"f3\"> {` ${b64DecodeUnicode(current_question.question)}`}</div>\n\n                        <div className=\"answer-container dark-gray pa2 mv2\">\n                            {answerDivs}\n                        </div> \n                    </div>\n                </Fragment> : \n\n                (this.state.sessionState === \"correct_answer\") ? <Correct onNextQuestion={this.onNextQuestion} /> : \n\n                (this.state.sessionState === \"incorrect_answer\") ? <Wrong onNextQuestion={this.onNextQuestion} /> :\n\n                (this.state.sessionState === 'completed') ? <Complete appState={this.props.appState} onFinishGame={this.props.backToHome} /> :\n\n                <img className=\"load-logo\" src={magnet} height=\"80px\" width=\"80px\" alt=\"QuizMaster\" />\n            }\n            </Fragment>                \n        )\n    }\n}\n\n\nexport default Session;"]},"metadata":{},"sourceType":"module"}